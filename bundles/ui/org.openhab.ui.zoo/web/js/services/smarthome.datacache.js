// Generated by CoffeeScript 1.9.1
angular.module('SmartHome.datacache', []).factory('DataCache', [
  '$q', function($q) {
    var DataCache;
    return new (DataCache = (function() {
      function DataCache() {}

      DataCache.cacheEnabled = false;

      DataCache.dirty = false;

      DataCache.prototype.init = function(data1, remoteService) {
        this.data = data1;
        this.remoteService = remoteService;
        return this;
      };

      DataCache.prototype.getAll = function(callback, refresh) {
        var deferred, notifyCallback, successFn;
        deferred = $q.defer();
        this.remoteService.getAll(function(data) {
          var ref;
          if (!this.cacheEnabled || data.length !== ((ref = this.data) != null ? ref.length : void 0) || this.dirty || refresh) {
            this.data = data;
            return deferred.resolve(data);
          } else {
            return deferred.resolve('No Update');
          }
        });
        successFn = function(res) {
          if (res !== 'No update') {
            return typeof callback === "function" ? callback(res) : void 0;
          }
        };
        notifyCallback = function(res) {
          return (typeof callback === "function" ? callback(res) : void 0) || null;
        };
        deferred.promise.then(successFn, null, notifyCallback);
        if (this.cacheEnabled) {
          return deferred.notify(this.data);
        }
      };

      DataCache.prototype.getOne = function(condition, callback, refresh) {
        var element, onError, onSuccess;
        element = this.find(condition);
        if (element && !this.dirty && !refresh) {
          return callback(element);
        } else {
          onSuccess = (function(_this) {
            return function(res) {
              return typeof callback === "function" ? callback(_this.find(condition)) : void 0;
            };
          })(this);
          onError = function() {
            return typeof callback === "function" ? callback(null) : void 0;
          };
          return this.getAll(null, true).then(onSuccess, onError);
        }
      };

      DataCache.prototype.find = function(condition) {
        var element, i, len, ref;
        ref = this.data;
        for (i = 0, len = ref.length; i < len; i++) {
          element = ref[i];
          if (condition(element)) {
            return element;
          }
        }
      };

      DataCache.prototype.add = function(element) {
        return this.data.push(element);
      };

      DataCache.prototype.remove = function(element) {
        var i, idx, len, ref, results;
        ref = this.data;
        results = [];
        for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
          element = ref[idx];
          if (condition(element)) {
            results.push(delete this.data[idx]);
          }
        }
        return results;
      };

      DataCache.prototype.setDirty = function(dirty) {
        this.dirty = dirty;
      };

      return DataCache;

    })());
  }
]);
