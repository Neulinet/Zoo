// Generated by CoffeeScript 1.9.1
'use strict';
angular.module('ZooLib.directives.dimmerItem', []).directive('dimmerItem', function($log, $timeout, itemService) {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'partials/directives/dimmerItem.html',
    scope: {
      item: '='
    },
    link: function(scope, elem, attrs) {
      var eventBuffer, i, len, options, ranger, ref, setOpacity, tag, updateItem;
      eventBuffer = null;
      scope.local = {
        stateOnOff: scope.item.state > 0 ? 'ON' : 'OFF',
        dimValue: parseInt(scope.item.state, 10) || 0,
        opacity: parseInt(scope.item.state, 10) / 100
      };
      scope.options = {
        cctv: attrs.cctv != null
      };
      ref = scope.item.tags;
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        scope.options.cssIconClass = (function() {
          switch (tag) {
            case 'power':
              return 'i-power';
            case 'light':
              return 'i-light-on-small';
          }
        })();
      }
      updateItem = function(newState) {
        scope.item.state = parseInt(newState, 10);
        return scope.$apply();
      };
      setOpacity = function() {
        var newOpacity;
        newOpacity = scope.local.dimValue / 100;
        if (newOpacity < .1) {
          newOpacity = .1;
        }
        if (newOpacity > .9) {
          newOpacity = .9;
        }
        return scope.local.opacity = newOpacity;
      };
      options = {
        callback: setOpacity,
        decimal: false,
        min: 0,
        max: 100,
        start: scope.local.dimValue
      };
      ranger = new Powerange($('.js-opacity', elem)[0], options);
      if (scope.options.cctv) {
        $('.popup-with-move-anim', elem).magnificPopup({
          type: 'inline',
          fixedContentPos: true,
          fixedBgPos: false,
          closeBtnInside: true,
          preloader: false,
          midClick: true,
          removalDelay: 300,
          mainClass: 'my-mfp-slide-bottom'
        });
      }
      scope.$watch('local.stateOnOff', function(state, oldState) {
        if (state === oldState) {
          return;
        }
        return itemService.sendCommand({
          itemName: scope.item.name
        }, state);
      });
      scope.$watch('local.dimValue', function(state, oldState) {
        if (state === oldState) {
          return;
        }
        $timeout.cancel(eventBuffer);
        return eventBuffer = $timeout(function() {
          return itemService.sendCommand({
            itemName: scope.item.name
          }, state);
        }, 100, false);
      });
      scope.$watch('item.state', function(state, oldState) {
        if (state === oldState) {
          return;
        }
        ranger.setStart(state);
        return $log.debug("Changed state form " + scope.item.label + " from " + oldState + " to " + state);
      });
      scope.$watch('item', function(item) {
        if (item == null) {
          return;
        }
        return scope.$on("smarthome/command/" + item.name, function(event, newState) {
          return updateItem(newState);
        });
      });
    }
  };
});
